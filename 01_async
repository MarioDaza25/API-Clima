const data = [{
    title: 'Aprendiendo JavaScript',
    year: '2021',
    isbn: '979-8700179263' ,
    author: 'Carlos Azaustre'
},
{
    title: 'React. js Práctico',
    year: '2022',
    isbn: 'TBD',
    author: 'Carlos Azaustre'
},
{
    title: 'Clean JavaScript',
    year: '2020',
    isbn: '979-8567583319',
    author: 'Miguel A. Gómez'
}]
//Este es el modo Sincrono, en caso de espera mientras se hace la consulta tardaria mucho tiempo 
function getData(){   
    return data;
}  


/* Modo Asincrono imprimiendo directamente 
 setTimeout() para simular un retardo es una funcion que recibe como parametro un callback y un tiempo de espera */

function getData(){
    setTimeout(() => {console.log(data)}, 2000)
}    

getData() 

//En caso de hacer el console.log antes de recibir los datos nos daria undifined porque debe esperar 2 segundos para tener respuesta y ahi si poderse ejecutar, ejemplo:

 function getData(){
    setTimeout(() => {return (data)}, 2000)   
}                
console.log(getData());

 

//Asincrono haciendo uso de Promesas
function getData(){
    return new Promise((resolve, reject) => {
        if(data.length == 0){
            reject(new Error('Datos Vacios'))
        }
        setTimeout(() => {resolve(data)}, 2000) 
    })
}

getData()
    .then((response) => console.log(response))
    .catch((err) => console.log(err.message))

//Asincrono Haciendo uso de await/async (asincrono de forma sincrona)

async function fetchingData(){
    const book = await getData();
    console.log(book)
}

fetchingData();